name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: paymentservice
  ORG_GRADLE_PROJECT_gdusername: ${{ github.actor }}
  ORG_GRADLE_PROJECT_gdtoken: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        
      - name : caching
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Create Build Artifact
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: clean build
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/gradle@master
        env:
         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=build.gradle --severity-threshold=high

      - name: Upload jar artifact
        uses: actions/upload-artifact@v1
        with:
          name: buildjar
          path: build/libs/payment-0.0.1-SNAPSHOT.jar


  #   Push image to GitHub Packages.
  push:
    # Ensure test job passes before pushing image.
    needs: build

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Download file buildJar
        uses: actions/download-artifact@v1
        with:
          name: buildjar

      - name: Build image
        run: |
          mkdir -p build/libs
          mv buildjar/payment-0.0.1-SNAPSHOT.jar build/libs
          docker build -t image .

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
